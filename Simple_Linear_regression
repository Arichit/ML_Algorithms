## Applying a Simple Linear regression to a data set to predict the salaries. Using the independent values to predict the dependent values.


# Importing libraries
# -------------------
import numpy as np # Importing Numpy
import matplotlib.pyplot as plt   #Importing matplotlib with pyplot module
import pandas as pd               #Importing Pandas Library

# Importing the dataset
# ---------------------
dataset = pd.read_csv('C:\\Users\\Naveen\\ML Programs\\Regression_Algorithms\\Salary_Data.csv')  # importing the dataset
print(dataset)                    #printing the dataset

X = dataset.iloc[:, :-1].values   #Selecting all the columns except the target column
y = dataset.iloc[:, 1].values     #Selecting the target column

# Splitting the dataset into the Training set and Test set
# --------------------------------------------------------
from sklearn.model_selection import train_test_split  #importing Sklearn library
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #splitting training and testing data into 80-20%

print(X_train, X_test, y_train, y_test) # printing splitted data

# Fitting Simple Linear Regression to the Training set
from sklearn.linear_model import LinearRegression  # import sklearn and using Linear regression technique 
regressor = LinearRegression() #abbrievating Linear regression for the ease of use
regressor.fit(X_train, y_train) # fitting regressed data

# Predicting the Test set results
y_pred = regressor.predict(X_test)
print(y_pred)

#Model Evaluation
from sklearn.metrics import r2_score #using r2_score module 
RSquare=r2_score(y_test,y_pred) #assigining values
RSquare #checking accuracy

# Visualising the Training set results
plt.scatter(X_train, y_train, color='red') #using scatter plot and plotting training data and assigning color
plt.plot(X_train, regressor.predict(X_train), color='blue') #assigning color and data to the plot using predicted data
plt.title('Salary vs Experience (Training set)') #Labeling the title
plt.xlabel('Years of Experience') # labeing X axis
plt.ylabel('Salary') # labeling Y axis
plt.show() # displaying the plotted graph

# Visualising the Test set results
plt.scatter(X_test, y_test, color='red') #using scatter plot and plotting testing data and assigning color
plt.plot(X_test, regressor.predict(X_test), color='blue') #assigning color and data to the plot using predicted data
plt.title('Salary vs Experience (Test set)') #Labeling the title
plt.xlabel('Years of Experience') # labeing X axis
plt.ylabel('Salary')  # labeing Y axis
plt.show() # displaying the plotted graph


# Predicting a new value
regressor.predict([[11]])

np.round(regressor.predict([[12]]),4) # round figuring the predicted values

from sklearn.metrics import mean_squared_error,mean_absolute_error #using mean square methods 
from math import sqrt # importing Square root function
rmse=sqrt(mean_squared_error(y_test,y_pred)) # assigning the MSE to a variable
print(rmse) # printing RMSE

mae=mean_absolute_error(y_test,y_pred) # finding Mean Absolute Error 
print(mae) # printing Mean Absolute error

df=pd.DataFrame({'actual':y_test,'predicted':y_pred}) #creating a data frame comparing actual value vs predicted value
print(df) # Printing the data frame



